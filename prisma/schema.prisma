generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @crud
model Tariff {
  id        String   @id @default(cuid())
  code      String?
  name      String?
  price     Int?     @default(0)
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// @crud
model Recipes {
  id          String   @id @default(cuid())
  description String?
  firstName   String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// @crud
model Patient {
  id                String            @id @default(cuid())
  documentType      String
  documentNumber    String            @unique
  firstName         String
  lastName          String
  email             String            @unique
  phone             String
  birthDate         DateTime
  gender            String // "M" | "F" "O", etc.
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  clinicalHistories ClinicalHistory[]
  appointments      Appointment[]
}

/// @crud
model Professional {
  id                String            @id @default(cuid())
  fullName          String
  email             String
  phone             String
  specialty         String
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  appointments      Appointment[]
  clinicalHistories ClinicalHistory[] // si firmará historias
}

/// @crud
model Services {
  id          String   @id @default(cuid())
  code        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)
}

model Prueba {
  id          String   @id @default(cuid())
  code        String?
  description String?
  active      Boolean? @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Prueba2 {
  id          String   @id @default(cuid())
  code        String?
  description String?
  active      Boolean? @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// @crud
model ClinicalHistory {
  id             String   @id @default(cuid())
  patientId      String
  professionalId String?
  date           DateTime @default(now())
  notes          String?
  diagnosis      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient      Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  professional Professional? @relation(fields: [professionalId], references: [id])
}

model Appointment {
  id             String   @id @default(cuid())
  professionalId String
  patientId      String
  startsAt       DateTime
  endsAt         DateTime
  status         String   @default("SCHEDULED") // SCHEDULED | COMPLETED | CANCELLED
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([professionalId, startsAt])
  @@index([patientId, startsAt])
}

model ConfigCrud {
  id                   String   @id @default(cuid())
  model                String   @unique
  title                String
  enableSelection      Boolean? @default(true) @map("enable_selection")
  enableMultiSelection Boolean? @default(true) @map("enable_multi_selection")
  enablePagination     Boolean? @default(true) @map("enable_pagination")
  pageSize             Int      @default(10) @map("page_size")
  enableSearch         Boolean? @default(true)
  searchPlaceHolder    String?  @default("Search...") @map("search_place_holder")
  enableFilters        Boolean? @default(true) @map("enable_filters")
  enableExport         Boolean? @default(true) @map("enable_export")
  relations            String[] @default([])
  bulkActions          String[] @default([]) @map("bulk_actions")
  rowActions           String[] @default([]) @map("row_actions")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  details ConfigCrudDetail[]
}

model ConfigCrudDetail {
  id String @id @default(cuid())

  // vínculo
  configCrudId String     @map("config_crud_id")
  configCrud   ConfigCrud @relation(fields: [configCrudId], references: [id], onDelete: Cascade)

  // clave del campo (match CRUDTable.json) — READ ONLY en UI
  key String

  // metadatos
  type        String // text|textarea|email|number|currency|boolean|date|select|badge (compatible con base)
  title       String
  sortable    Boolean? @default(true)
  filterable  Boolean? @default(true)
  frozen      Boolean? @default(false)
  required    Boolean? @default(false)
  hidden      Boolean? @default(false)
  hideable    Boolean? @default(false)
  render      String? // grid|form|grid-form
  listOptions String?  @map("list_options")
  unique      Boolean? @default(false) // NUEVO

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([configCrudId, key])
  @@index([configCrudId])
}
