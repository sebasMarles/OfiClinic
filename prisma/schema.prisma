generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Collection {
  id          String          @id @default(cuid())
  slug        String          @unique
  title       String
  description String?
  fields      Field[]
  records     DynamicRecord[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Field {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  key          String
  title        String
  type         String      // 'text' | 'number' | 'boolean' | 'date' | 'email' | 'select' | 'currency' | 'badge'
  options      Json?
  required     Boolean     @default(false)
  filterable   Boolean     @default(true)
  hidden       Boolean     @default(false)
  order        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([collectionId, key])
}

model DynamicRecord {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  data         Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}


model Patient {
  id             String   @id @default(cuid())
  documentType   String
  documentNumber String   @unique
  firstName      String
  lastName       String
  email          String?  @unique
  phone          String?
  birthDate      DateTime?
  gender         String?  // "M" | "F" | "O", etc.
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones
  clinicalHistories ClinicalHistory[]
  appointments       Appointment[]
}

model Professional {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  phone      String?
  specialty  String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  appointments Appointment[]
  clinicalHistories ClinicalHistory[] // si firmar√° historias
}

model ClinicalHistory {
  id             String   @id @default(cuid())
  patientId      String
  professionalId String?
  date           DateTime @default(now())
  notes          String?
  diagnosis      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  professional Professional? @relation(fields: [professionalId], references: [id])
}

model Appointment {
  id             String   @id @default(cuid())
  professionalId String
  patientId      String
  startsAt       DateTime
  endsAt         DateTime
  status         String   @default("SCHEDULED") // SCHEDULED | COMPLETED | CANCELLED
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  patient      Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([professionalId, startsAt])
  @@index([patientId, startsAt])
}
